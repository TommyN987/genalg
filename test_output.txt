   Compiling genalg v0.1.0 (/home/tommy/repos/genalg)
warning: unused import: `ThreadLocalRng`
  --> src/constraints/combinatorial.rs:14:41
   |
14 | use crate::rng::{RandomNumberGenerator, ThreadLocalRng};
   |                                         ^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `crate::rng::RandomNumberGenerator`
   --> src/constraints/combinatorial.rs:490:9
    |
490 |     use crate::rng::RandomNumberGenerator;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `HashMap` and `HashSet`
   --> src/constraints/combinatorial.rs:491:28
    |
491 |     use std::collections::{HashMap, HashSet};
    |                            ^^^^^^^  ^^^^^^^

error[E0277]: `F` doesn't implement `Debug`
   --> src/constraints/combinatorial.rs:52:33
    |
52  | impl<P, T, F> Constraint<P> for UniqueElementsConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `F` cannot be formatted using `{:?}` because it doesn't implement `Debug`
    |
note: required for `UniqueElementsConstraint<T, F>` to implement `Debug`
   --> src/constraints/combinatorial.rs:20:10
    |
20  | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
56  |     F: Fn(&P) -> Vec<T> + Send + Sync + std::fmt::Debug,
    |                                       +++++++++++++++++

error[E0277]: expected a `Fn(&T)` closure, found `F`
   --> src/constraints/combinatorial.rs:52:33
    |
52  | impl<P, T, F> Constraint<P> for UniqueElementsConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn(&T)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&T,)`
note: required for `UniqueElementsConstraint<T, F>` to implement `Debug`
   --> src/constraints/combinatorial.rs:20:10
    |
20  | #[derive(Debug, Clone)]
    |          ^^^^^
...
24  |     F: Fn(&T) -> Vec<T>,
    |        ---------------- unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `T` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:52:33
    |
52  | impl<P, T, F> Constraint<P> for UniqueElementsConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be shared between threads safely
    |
note: required because it appears within the type `PhantomData<T>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `UniqueElementsConstraint<T, F>`
   --> src/constraints/combinatorial.rs:21:12
    |
21  | pub struct UniqueElementsConstraint<T, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
55  |     T: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `T` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:52:33
    |
52  | impl<P, T, F> Constraint<P> for UniqueElementsConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely
    |
note: required because it appears within the type `PhantomData<T>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `UniqueElementsConstraint<T, F>`
   --> src/constraints/combinatorial.rs:21:12
    |
21  | pub struct UniqueElementsConstraint<T, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
55  |     T: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: expected a `FnOnce(&T)` closure, found `F`
  --> src/constraints/combinatorial.rs:58:5
   |
58 |     fn check(&self, phenotype: &P) -> Vec<ConstraintViolation> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce(&T)` closure, found `F`
   |
   = note: expected a closure with arguments `(&P,)`
              found a closure with arguments `(&T,)`
note: required by a bound in `UniqueElementsConstraint`
  --> src/constraints/combinatorial.rs:24:18
   |
21 | pub struct UniqueElementsConstraint<T, F>
   |            ------------------------ required by a bound in this struct
...
24 |     F: Fn(&T) -> Vec<T>,
   |                  ^^^^^^ required by this bound in `UniqueElementsConstraint`

error[E0277]: expected a `FnOnce(&T)` closure, found `F`
  --> src/constraints/combinatorial.rs:75:5
   |
75 |     fn repair_with_rng(&self, phenotype: &mut P, rng: &mut RandomNumberGenerator) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce(&T)` closure, found `F`
   |
   = note: expected a closure with arguments `(&P,)`
              found a closure with arguments `(&T,)`
note: required by a bound in `UniqueElementsConstraint`
  --> src/constraints/combinatorial.rs:24:18
   |
21 | pub struct UniqueElementsConstraint<T, F>
   |            ------------------------ required by a bound in this struct
...
24 |     F: Fn(&T) -> Vec<T>,
   |                  ^^^^^^ required by this bound in `UniqueElementsConstraint`

error[E0277]: `F` doesn't implement `Debug`
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `F` cannot be formatted using `{:?}` because it doesn't implement `Debug`
    |
note: required for `CompleteAssignmentConstraint<K, V, F>` to implement `Debug`
   --> src/constraints/combinatorial.rs:119:10
    |
119 | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
161 |     F: Fn(&P) -> HashMap<K, V> + Send + Sync + std::fmt::Debug,
    |                                              +++++++++++++++++

error[E0277]: expected a `Fn(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required for `CompleteAssignmentConstraint<K, V, F>` to implement `Debug`
   --> src/constraints/combinatorial.rs:119:10
    |
119 | #[derive(Debug, Clone)]
    |          ^^^^^
...
124 |     F: Fn(&K) -> Vec<V>,
    |        ---------------- unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `V` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be shared between threads safely
    |
note: required because it appears within the type `PhantomData<V>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CompleteAssignmentConstraint<K, V, F>`
   --> src/constraints/combinatorial.rs:120:12
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
160 |     V: Debug + Clone + std::marker::Sync,
    |                      +++++++++++++++++++

error[E0277]: `V` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be sent between threads safely
    |
note: required because it appears within the type `PhantomData<V>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CompleteAssignmentConstraint<K, V, F>`
   --> src/constraints/combinatorial.rs:120:12
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
160 |     V: Debug + Clone + std::marker::Send,
    |                      +++++++++++++++++++

error[E0277]: `K` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `K` cannot be shared between threads safely
    |
    = note: required because it appears within the type `(K, ())`
    = note: required for `hashbrown::raw::RawTable<(K, ())>` to implement `Sync`
note: required because it appears within the type `hashbrown::map::HashMap<K, (), RandomState>`
   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12
note: required because it appears within the type `hashbrown::set::HashSet<K, RandomState>`
   --> /rust/deps/hashbrown-0.15.0/src/set.rs:114:12
note: required because it appears within the type `HashSet<K>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/set.rs:106:12
    |
106 | pub struct HashSet<T, S = RandomState> {
    |            ^^^^^^^
note: required because it appears within the type `CompleteAssignmentConstraint<K, V, F>`
   --> src/constraints/combinatorial.rs:120:12
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
159 |     K: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `K` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `K` cannot be sent between threads safely
    |
    = note: required because it appears within the type `(K, ())`
    = note: required for `hashbrown::raw::RawTable<(K, ())>` to implement `Send`
note: required because it appears within the type `hashbrown::map::HashMap<K, (), RandomState>`
   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12
note: required because it appears within the type `hashbrown::set::HashSet<K, RandomState>`
   --> /rust/deps/hashbrown-0.15.0/src/set.rs:114:12
note: required because it appears within the type `HashSet<K>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/set.rs:106:12
    |
106 | pub struct HashSet<T, S = RandomState> {
    |            ^^^^^^^
note: required because it appears within the type `CompleteAssignmentConstraint<K, V, F>`
   --> src/constraints/combinatorial.rs:120:12
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
159 |     K: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: expected a `FnOnce(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:163:5
    |
163 |     fn check(&self, phenotype: &P) -> Vec<ConstraintViolation> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required by a bound in `CompleteAssignmentConstraint`
   --> src/constraints/combinatorial.rs:124:18
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ---------------------------- required by a bound in this struct
...
124 |     F: Fn(&K) -> Vec<V>,
    |                  ^^^^^^ required by this bound in `CompleteAssignmentConstraint`

error[E0277]: expected a `FnOnce(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:179:5
    |
179 |     fn repair_with_rng(&self, phenotype: &mut P, rng: &mut RandomNumberGenerator) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required by a bound in `CompleteAssignmentConstraint`
   --> src/constraints/combinatorial.rs:124:18
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ---------------------------- required by a bound in this struct
...
124 |     F: Fn(&K) -> Vec<V>,
    |                  ^^^^^^ required by this bound in `CompleteAssignmentConstraint`

error[E0277]: `F` doesn't implement `Debug`
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `F` cannot be formatted using `{:?}` because it doesn't implement `Debug`
    |
note: required for `CapacityConstraint<K, V, F, G>` to implement `Debug`
   --> src/constraints/combinatorial.rs:221:10
    |
221 | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
266 |     F: Fn(&P) -> HashMap<V, Vec<K>> + Send + Sync + std::fmt::Debug,
    |                                                   +++++++++++++++++

error[E0277]: `G` doesn't implement `Debug`
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `G` cannot be formatted using `{:?}` because it doesn't implement `Debug`
    |
note: required for `CapacityConstraint<K, V, F, G>` to implement `Debug`
   --> src/constraints/combinatorial.rs:221:10
    |
221 | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
267 |     G: Fn(&V) -> usize + Send + Sync + std::fmt::Debug,
    |                                      +++++++++++++++++

error[E0277]: expected a `Fn(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required for `CapacityConstraint<K, V, F, G>` to implement `Debug`
   --> src/constraints/combinatorial.rs:221:10
    |
221 | #[derive(Debug, Clone)]
    |          ^^^^^
...
226 |     F: Fn(&K) -> HashMap<V, usize>,
    |        --------------------------- unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `K` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `K` cannot be shared between threads safely
    |
    = note: required because it appears within the type `(K, V)`
note: required because it appears within the type `PhantomData<(K, V)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CapacityConstraint<K, V, F, G>`
   --> src/constraints/combinatorial.rs:222:12
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
264 |     K: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `V` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be shared between threads safely
    |
    = note: required because it appears within the type `(K, V)`
note: required because it appears within the type `PhantomData<(K, V)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CapacityConstraint<K, V, F, G>`
   --> src/constraints/combinatorial.rs:222:12
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
265 |     V: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `K` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `K` cannot be sent between threads safely
    |
    = note: required because it appears within the type `(K, V)`
note: required because it appears within the type `PhantomData<(K, V)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CapacityConstraint<K, V, F, G>`
   --> src/constraints/combinatorial.rs:222:12
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
264 |     K: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: `V` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be sent between threads safely
    |
    = note: required because it appears within the type `(K, V)`
note: required because it appears within the type `PhantomData<(K, V)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CapacityConstraint<K, V, F, G>`
   --> src/constraints/combinatorial.rs:222:12
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
265 |     V: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: expected a `FnOnce(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:269:5
    |
269 |     fn check(&self, phenotype: &P) -> Vec<ConstraintViolation> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required by a bound in `CapacityConstraint`
   --> src/constraints/combinatorial.rs:226:18
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ------------------ required by a bound in this struct
...
226 |     F: Fn(&K) -> HashMap<V, usize>,
    |                  ^^^^^^^^^^^^^^^^^ required by this bound in `CapacityConstraint`

error[E0277]: expected a `FnOnce(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:292:5
    |
292 |     fn repair_with_rng(&self, phenotype: &mut P, rng: &mut RandomNumberGenerator) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required by a bound in `CapacityConstraint`
   --> src/constraints/combinatorial.rs:226:18
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ------------------ required by a bound in this struct
...
226 |     F: Fn(&K) -> HashMap<V, usize>,
    |                  ^^^^^^^^^^^^^^^^^ required by this bound in `CapacityConstraint`

error[E0277]: `F` doesn't implement `Debug`
   --> src/constraints/combinatorial.rs:373:33
    |
373 | impl<P, T, F> Constraint<P> for DependencyConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `F` cannot be formatted using `{:?}` because it doesn't implement `Debug`
    |
note: required for `DependencyConstraint<T, F>` to implement `Debug`
   --> src/constraints/combinatorial.rs:339:10
    |
339 | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
377 |     F: Fn(&P) -> Vec<T> + Send + Sync + std::fmt::Debug,
    |                                       +++++++++++++++++

error[E0277]: expected a `Fn(&T)` closure, found `F`
   --> src/constraints/combinatorial.rs:373:33
    |
373 | impl<P, T, F> Constraint<P> for DependencyConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn(&T)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&T,)`
note: required for `DependencyConstraint<T, F>` to implement `Debug`
   --> src/constraints/combinatorial.rs:339:10
    |
339 | #[derive(Debug, Clone)]
    |          ^^^^^
...
343 |     F: Fn(&T) -> Vec<(T, T)>,
    |        --------------------- unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `T` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:373:33
    |
373 | impl<P, T, F> Constraint<P> for DependencyConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be shared between threads safely
    |
    = note: required because it appears within the type `(T, T)`
note: required because it appears within the type `PhantomData<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `alloc::raw_vec::RawVec<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/raw_vec.rs:75:19
    |
75  | pub(crate) struct RawVec<T, A: Allocator = Global> {
    |                   ^^^^^^
note: required because it appears within the type `Vec<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:397:12
    |
397 | pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
    |            ^^^
note: required because it appears within the type `DependencyConstraint<T, F>`
   --> src/constraints/combinatorial.rs:340:12
    |
340 | pub struct DependencyConstraint<T, F>
    |            ^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
376 |     T: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `T` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:373:33
    |
373 | impl<P, T, F> Constraint<P> for DependencyConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely
    |
    = note: required because it appears within the type `(T, T)`
note: required because it appears within the type `PhantomData<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `alloc::raw_vec::RawVec<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/raw_vec.rs:75:19
    |
75  | pub(crate) struct RawVec<T, A: Allocator = Global> {
    |                   ^^^^^^
note: required because it appears within the type `Vec<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:397:12
    |
397 | pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
    |            ^^^
note: required because it appears within the type `DependencyConstraint<T, F>`
   --> src/constraints/combinatorial.rs:340:12
    |
340 | pub struct DependencyConstraint<T, F>
    |            ^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
376 |     T: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: expected a `FnOnce(&T)` closure, found `F`
   --> src/constraints/combinatorial.rs:379:5
    |
379 |     fn check(&self, phenotype: &P) -> Vec<ConstraintViolation> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce(&T)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&T,)`
note: required by a bound in `DependencyConstraint`
   --> src/constraints/combinatorial.rs:343:18
    |
340 | pub struct DependencyConstraint<T, F>
    |            -------------------- required by a bound in this struct
...
343 |     F: Fn(&T) -> Vec<(T, T)>,
    |                  ^^^^^^^^^^^ required by this bound in `DependencyConstraint`

error[E0277]: expected a `FnOnce(&T)` closure, found `F`
   --> src/constraints/combinatorial.rs:424:5
    |
424 |     fn repair_with_rng(&self, phenotype: &mut P, rng: &mut RandomNumberGenerator) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce(&T)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&T,)`
note: required by a bound in `DependencyConstraint`
   --> src/constraints/combinatorial.rs:343:18
    |
340 | pub struct DependencyConstraint<T, F>
    |            -------------------- required by a bound in this struct
...
343 |     F: Fn(&T) -> Vec<(T, T)>,
    |                  ^^^^^^^^^^^ required by this bound in `DependencyConstraint`

error[E0277]: expected a `Fn(&T)` closure, found `F`
  --> src/constraints/combinatorial.rs:58:14
   |
58 |     fn check(&self, phenotype: &P) -> Vec<ConstraintViolation> {
   |              ^^^^^ expected an `Fn(&T)` closure, found `F`
   |
   = note: expected a closure with arguments `(&P,)`
              found a closure with arguments `(&T,)`
note: required by a bound in `UniqueElementsConstraint`
  --> src/constraints/combinatorial.rs:24:8
   |
21 | pub struct UniqueElementsConstraint<T, F>
   |            ------------------------ required by a bound in this struct
...
24 |     F: Fn(&T) -> Vec<T>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `UniqueElementsConstraint`

error[E0277]: expected a `Fn(&T)` closure, found `F`
  --> src/constraints/combinatorial.rs:75:24
   |
75 |     fn repair_with_rng(&self, phenotype: &mut P, rng: &mut RandomNumberGenerator) -> bool {
   |                        ^^^^^ expected an `Fn(&T)` closure, found `F`
   |
   = note: expected a closure with arguments `(&P,)`
              found a closure with arguments `(&T,)`
note: required by a bound in `UniqueElementsConstraint`
  --> src/constraints/combinatorial.rs:24:8
   |
21 | pub struct UniqueElementsConstraint<T, F>
   |            ------------------------ required by a bound in this struct
...
24 |     F: Fn(&T) -> Vec<T>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `UniqueElementsConstraint`

error[E0277]: expected a `Fn(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:163:14
    |
163 |     fn check(&self, phenotype: &P) -> Vec<ConstraintViolation> {
    |              ^^^^^ expected an `Fn(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required by a bound in `CompleteAssignmentConstraint`
   --> src/constraints/combinatorial.rs:124:8
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ---------------------------- required by a bound in this struct
...
124 |     F: Fn(&K) -> Vec<V>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `CompleteAssignmentConstraint`

error[E0277]: expected a `Fn(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:179:24
    |
179 |     fn repair_with_rng(&self, phenotype: &mut P, rng: &mut RandomNumberGenerator) -> bool {
    |                        ^^^^^ expected an `Fn(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required by a bound in `CompleteAssignmentConstraint`
   --> src/constraints/combinatorial.rs:124:8
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ---------------------------- required by a bound in this struct
...
124 |     F: Fn(&K) -> Vec<V>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `CompleteAssignmentConstraint`

error[E0277]: expected a `Fn(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:269:14
    |
269 |     fn check(&self, phenotype: &P) -> Vec<ConstraintViolation> {
    |              ^^^^^ expected an `Fn(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required by a bound in `CapacityConstraint`
   --> src/constraints/combinatorial.rs:226:8
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ------------------ required by a bound in this struct
...
226 |     F: Fn(&K) -> HashMap<V, usize>,
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `CapacityConstraint`

error[E0277]: expected a `Fn(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:292:24
    |
292 |     fn repair_with_rng(&self, phenotype: &mut P, rng: &mut RandomNumberGenerator) -> bool {
    |                        ^^^^^ expected an `Fn(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required by a bound in `CapacityConstraint`
   --> src/constraints/combinatorial.rs:226:8
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ------------------ required by a bound in this struct
...
226 |     F: Fn(&K) -> HashMap<V, usize>,
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `CapacityConstraint`

error[E0277]: expected a `Fn(&T)` closure, found `F`
   --> src/constraints/combinatorial.rs:379:14
    |
379 |     fn check(&self, phenotype: &P) -> Vec<ConstraintViolation> {
    |              ^^^^^ expected an `Fn(&T)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&T,)`
note: required by a bound in `DependencyConstraint`
   --> src/constraints/combinatorial.rs:343:8
    |
340 | pub struct DependencyConstraint<T, F>
    |            -------------------- required by a bound in this struct
...
343 |     F: Fn(&T) -> Vec<(T, T)>,
    |        ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DependencyConstraint`

error[E0277]: expected a `Fn(&T)` closure, found `F`
   --> src/constraints/combinatorial.rs:424:24
    |
424 |     fn repair_with_rng(&self, phenotype: &mut P, rng: &mut RandomNumberGenerator) -> bool {
    |                        ^^^^^ expected an `Fn(&T)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&T,)`
note: required by a bound in `DependencyConstraint`
   --> src/constraints/combinatorial.rs:343:8
    |
340 | pub struct DependencyConstraint<T, F>
    |            -------------------- required by a bound in this struct
...
343 |     F: Fn(&T) -> Vec<(T, T)>,
    |        ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `DependencyConstraint`

error[E0277]: `F` doesn't implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:52:33
    |
52  | impl<P, T, F> Constraint<P> for UniqueElementsConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `F` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |
note: required for `UniqueElementsConstraint<T, F>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:20:10
    |
20  | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
56  |     F: Fn(&P) -> Vec<T> + Send + Sync + std::fmt::Debug,
    |                                       +++++++++++++++++

error[E0277]: expected a `Fn(&T)` closure, found `F`
   --> src/constraints/combinatorial.rs:52:33
    |
52  | impl<P, T, F> Constraint<P> for UniqueElementsConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn(&T)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&T,)`
note: required for `UniqueElementsConstraint<T, F>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:20:10
    |
20  | #[derive(Debug, Clone)]
    |          ^^^^^
...
24  |     F: Fn(&T) -> Vec<T>,
    |        ---------------- unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `T` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:52:33
    |
52  | impl<P, T, F> Constraint<P> for UniqueElementsConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be shared between threads safely
    |
note: required because it appears within the type `PhantomData<T>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `UniqueElementsConstraint<T, F>`
   --> src/constraints/combinatorial.rs:21:12
    |
21  | pub struct UniqueElementsConstraint<T, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
55  |     T: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `T` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:52:33
    |
52  | impl<P, T, F> Constraint<P> for UniqueElementsConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely
    |
note: required because it appears within the type `PhantomData<T>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `UniqueElementsConstraint<T, F>`
   --> src/constraints/combinatorial.rs:21:12
    |
21  | pub struct UniqueElementsConstraint<T, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
55  |     T: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: `F` doesn't implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `F` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |
note: required for `CompleteAssignmentConstraint<K, V, F>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:119:10
    |
119 | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
161 |     F: Fn(&P) -> HashMap<K, V> + Send + Sync + std::fmt::Debug,
    |                                              +++++++++++++++++

error[E0277]: expected a `Fn(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required for `CompleteAssignmentConstraint<K, V, F>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:119:10
    |
119 | #[derive(Debug, Clone)]
    |          ^^^^^
...
124 |     F: Fn(&K) -> Vec<V>,
    |        ---------------- unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `V` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be shared between threads safely
    |
note: required because it appears within the type `PhantomData<V>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CompleteAssignmentConstraint<K, V, F>`
   --> src/constraints/combinatorial.rs:120:12
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
160 |     V: Debug + Clone + std::marker::Sync,
    |                      +++++++++++++++++++

error[E0277]: `V` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be sent between threads safely
    |
note: required because it appears within the type `PhantomData<V>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CompleteAssignmentConstraint<K, V, F>`
   --> src/constraints/combinatorial.rs:120:12
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
160 |     V: Debug + Clone + std::marker::Send,
    |                      +++++++++++++++++++

error[E0277]: `K` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `K` cannot be shared between threads safely
    |
    = note: required because it appears within the type `(K, ())`
    = note: required for `hashbrown::raw::RawTable<(K, ())>` to implement `Sync`
note: required because it appears within the type `hashbrown::map::HashMap<K, (), RandomState>`
   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12
note: required because it appears within the type `hashbrown::set::HashSet<K, RandomState>`
   --> /rust/deps/hashbrown-0.15.0/src/set.rs:114:12
note: required because it appears within the type `HashSet<K>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/set.rs:106:12
    |
106 | pub struct HashSet<T, S = RandomState> {
    |            ^^^^^^^
note: required because it appears within the type `CompleteAssignmentConstraint<K, V, F>`
   --> src/constraints/combinatorial.rs:120:12
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
159 |     K: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `K` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:156:36
    |
156 | impl<P, K, V, F> Constraint<P> for CompleteAssignmentConstraint<K, V, F>
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `K` cannot be sent between threads safely
    |
    = note: required because it appears within the type `(K, ())`
    = note: required for `hashbrown::raw::RawTable<(K, ())>` to implement `Send`
note: required because it appears within the type `hashbrown::map::HashMap<K, (), RandomState>`
   --> /rust/deps/hashbrown-0.15.0/src/map.rs:185:12
note: required because it appears within the type `hashbrown::set::HashSet<K, RandomState>`
   --> /rust/deps/hashbrown-0.15.0/src/set.rs:114:12
note: required because it appears within the type `HashSet<K>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/set.rs:106:12
    |
106 | pub struct HashSet<T, S = RandomState> {
    |            ^^^^^^^
note: required because it appears within the type `CompleteAssignmentConstraint<K, V, F>`
   --> src/constraints/combinatorial.rs:120:12
    |
120 | pub struct CompleteAssignmentConstraint<K, V, F>
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
159 |     K: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: `F` doesn't implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `F` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |
note: required for `CapacityConstraint<K, V, F, G>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:221:10
    |
221 | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
266 |     F: Fn(&P) -> HashMap<V, Vec<K>> + Send + Sync + std::fmt::Debug,
    |                                                   +++++++++++++++++

error[E0277]: `G` doesn't implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `G` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |
note: required for `CapacityConstraint<K, V, F, G>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:221:10
    |
221 | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
267 |     G: Fn(&V) -> usize + Send + Sync + std::fmt::Debug,
    |                                      +++++++++++++++++

error[E0277]: expected a `Fn(&K)` closure, found `F`
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn(&K)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&K,)`
note: required for `CapacityConstraint<K, V, F, G>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:221:10
    |
221 | #[derive(Debug, Clone)]
    |          ^^^^^
...
226 |     F: Fn(&K) -> HashMap<V, usize>,
    |        --------------------------- unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `K` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `K` cannot be shared between threads safely
    |
    = note: required because it appears within the type `(K, V)`
note: required because it appears within the type `PhantomData<(K, V)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CapacityConstraint<K, V, F, G>`
   --> src/constraints/combinatorial.rs:222:12
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
264 |     K: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `V` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be shared between threads safely
    |
    = note: required because it appears within the type `(K, V)`
note: required because it appears within the type `PhantomData<(K, V)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CapacityConstraint<K, V, F, G>`
   --> src/constraints/combinatorial.rs:222:12
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
265 |     V: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `K` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `K` cannot be sent between threads safely
    |
    = note: required because it appears within the type `(K, V)`
note: required because it appears within the type `PhantomData<(K, V)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CapacityConstraint<K, V, F, G>`
   --> src/constraints/combinatorial.rs:222:12
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
264 |     K: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: `V` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:261:39
    |
261 | impl<P, K, V, F, G> Constraint<P> for CapacityConstraint<K, V, F, G>
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be sent between threads safely
    |
    = note: required because it appears within the type `(K, V)`
note: required because it appears within the type `PhantomData<(K, V)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `CapacityConstraint<K, V, F, G>`
   --> src/constraints/combinatorial.rs:222:12
    |
222 | pub struct CapacityConstraint<K, V, F, G>
    |            ^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
265 |     V: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

error[E0277]: `F` doesn't implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:373:33
    |
373 | impl<P, T, F> Constraint<P> for DependencyConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `F` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`
    |
note: required for `DependencyConstraint<T, F>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:339:10
    |
339 | #[derive(Debug, Clone)]
    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider further restricting this bound
    |
377 |     F: Fn(&P) -> Vec<T> + Send + Sync + std::fmt::Debug,
    |                                       +++++++++++++++++

error[E0277]: expected a `Fn(&T)` closure, found `F`
   --> src/constraints/combinatorial.rs:373:33
    |
373 | impl<P, T, F> Constraint<P> for DependencyConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn(&T)` closure, found `F`
    |
    = note: expected a closure with arguments `(&P,)`
               found a closure with arguments `(&T,)`
note: required for `DependencyConstraint<T, F>` to implement `std::fmt::Debug`
   --> src/constraints/combinatorial.rs:339:10
    |
339 | #[derive(Debug, Clone)]
    |          ^^^^^
...
343 |     F: Fn(&T) -> Vec<(T, T)>,
    |        --------------------- unsatisfied trait bound introduced in this `derive` macro
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:26
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                          ^^^^^ required by this bound in `Constraint`
    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `T` cannot be shared between threads safely
   --> src/constraints/combinatorial.rs:373:33
    |
373 | impl<P, T, F> Constraint<P> for DependencyConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be shared between threads safely
    |
    = note: required because it appears within the type `(T, T)`
note: required because it appears within the type `PhantomData<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `alloc::raw_vec::RawVec<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/raw_vec.rs:75:19
    |
75  | pub(crate) struct RawVec<T, A: Allocator = Global> {
    |                   ^^^^^^
note: required because it appears within the type `Vec<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:397:12
    |
397 | pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
    |            ^^^
note: required because it appears within the type `DependencyConstraint<T, F>`
   --> src/constraints/combinatorial.rs:340:12
    |
340 | pub struct DependencyConstraint<T, F>
    |            ^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:41
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                         ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
376 |     T: Eq + Hash + Debug + Clone + std::marker::Sync,
    |                                  +++++++++++++++++++

error[E0277]: `T` cannot be sent between threads safely
   --> src/constraints/combinatorial.rs:373:33
    |
373 | impl<P, T, F> Constraint<P> for DependencyConstraint<T, F>
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely
    |
    = note: required because it appears within the type `(T, T)`
note: required because it appears within the type `PhantomData<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs:753:12
    |
753 | pub struct PhantomData<T: ?Sized>;
    |            ^^^^^^^^^^^
note: required because it appears within the type `alloc::raw_vec::RawVec<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/raw_vec.rs:75:19
    |
75  | pub(crate) struct RawVec<T, A: Allocator = Global> {
    |                   ^^^^^^
note: required because it appears within the type `Vec<(T, T)>`
   --> /home/tommy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:397:12
    |
397 | pub struct Vec<T, #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global> {
    |            ^^^
note: required because it appears within the type `DependencyConstraint<T, F>`
   --> src/constraints/combinatorial.rs:340:12
    |
340 | pub struct DependencyConstraint<T, F>
    |            ^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `constraints::Constraint`
   --> src/constraints/mod.rs:152:34
    |
152 | pub trait Constraint<P>: Debug + Send + Sync
    |                                  ^^^^ required by this bound in `Constraint`
help: consider further restricting this bound
    |
376 |     T: Eq + Hash + Debug + Clone + std::marker::Send,
    |                                  +++++++++++++++++++

For more information about this error, try `rustc --explain E0277`.
warning: `genalg` (lib) generated 1 warning
error: could not compile `genalg` (lib) due to 37 previous errors; 1 warning emitted
warning: build failed, waiting for other jobs to finish...
warning: `genalg` (lib test) generated 3 warnings (1 duplicate)
error: could not compile `genalg` (lib test) due to 37 previous errors; 3 warnings emitted
